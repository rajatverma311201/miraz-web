// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum EventType {
  SPORTS
  CULT
  LIT
  TECH
  eSPORTS
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Event {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  type                 EventType @default(SPORTS)
  club                 String
  tagline              String
  description          String?
  image                String
  registrationLink     String?
  rulebookLink         String?
  problemStatementLink String?
  submissionLink       String?
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  startTime            DateTime?
  endTime              DateTime?
  isLive               Boolean?
  status               String?
  prizeWorth           Int?
  teamMaxSize          Int?
  teamMinSize          Int?
}

model Coordinator {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  contact String
  eventId String @db.ObjectId
}

model Prize {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  first   Int
  second  Int
  third   Int
  eventId String @unique @db.ObjectId
}

model MirazTeamMember {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?
  image         String?
  role          String
  linkedinLink  String?
  instagramLink String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sponsor {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      String?
  image     String
  link      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Timeline {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  date  DateTime
  title String
}

model Keytalk {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  time  String

  speakers Speaker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Speaker {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String
  qualification String
  bio           String?
  link          String

  keytalkId String?  @db.ObjectId
  keytalk   Keytalk? @relation(fields: [keytalkId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
